/*
    30. view_manager_report:  This routine is used to view a report on the sales generated by each manager.
    The routine returns a table of records consisting of the following information for each manager:
        manager name,
        total number of course areas that are managed by the manager,
        total number of course offerings that ended this year
            (i.e., the course offeringâ€™s end date is within this year) that are managed by the manager,
        total net registration fees for all the course offerings that ended this year that are managed by the manager,
        the course offering title (i.e., course title)
            that has the highest total net registration fees among all the course offerings
            that ended this year that are managed by the manager;
            if there are ties, list all these top course offering titles.

    The total net registration fees for a course offering is defined to be
        the sum of the total registration fees paid for the course offering via credit card payment
        (excluding any refunded fees due to cancellations)
        and the total redemption registration fees for the course offering.
    The redemption registration fees for a course offering refers to the registration fees for a course offering
        that is paid via a redemption from a course package;
        this registration fees is given by the price of the course package divided by
        the number of sessions included in the course package (rounded down to the nearest dollar).

    There must be one output record for each manager in the company and
        the output is to be sorted by ascending order of manager name.
*/
DROP FUNCTION IF EXISTS view_manager_report CASCADE;
CREATE OR REPLACE FUNCTION view_manager_report()
RETURNS TABLE (
    manager_name                TEXT,
    num_course_areas            INTEGER,
    num_course_offerings        INTEGER,
    net_registration_fees       DEC(64, 2),
    top_course_offering_titles  TEXT[]
)
AS $$
BEGIN
    RETURN QUERY (
        /* names */
        WITH ManagerNames AS (
            SELECT manager_id, employee_name AS manager_name
            FROM Managers m
            JOIN Employees e ON m.manager_id = e.employee_id
        ),
        /* course areas */
        ManagerNumCourseAreas AS (
            SELECT manager_id, COUNT(*)::INTEGER as num_course_areas
            FROM Managers
            NATURAL LEFT OUTER JOIN CourseAreas
            GROUP BY manager_id
        ),

        /* course offerings */
        /* Todo: ManagerCourseOfferings and ManagerNumCourseOfferings should be restricted to course offerings that ends in the current year. */
        CourseOfferingsThisYear AS (
            SELECT *
            FROM CourseOfferings
            WHERE EXTRACT(YEAR FROM offering_end_date) == EXTRACT(YEAR FROM CURRENT_DATE)
        ),
        ManagerCourseOfferings AS (
            SELECT manager_id, course_id, offering_launch_date
            FROM CourseOfferingsThisYear
            NATURAL JOIN Courses
            NATURAL JOIN CourseAreas
        ),
        ManagerNumCourseOfferings AS (
            SELECT manager_id, COUNT(*)::INTEGER AS num_course_offerings
            FROM Managers
            NATURAL LEFT OUTER JOIN ManagerCourseOfferings
            GROUP BY manager_id
        ),

        /* registration fees */
        CourseOfferingCreditCardRegistrationFees AS (
            SELECT offering_launch_date, course_id, SUM(offering_fees) AS total_registration_fees
            FROM Registers
            NATURAL JOIN Sessions
            NATURAL RIGHT OUTER JOIN CourseOfferingsThisYear
            GROUP BY offering_launch_date, course_id
        ),
        CourseOfferingCreditCardRefundFees AS (
            SELECT offering_launch_date, course_id, COALESCE(SUM(cancel_refund_amount), 0.00) AS total_refunded_fees
            FROM Cancels
            NATURAL JOIN Sessions
            NATURAL RIGHT OUTER JOIN CourseOfferingsThisYear
            GROUP BY offering_launch_date, course_id
        ),
        RedemptionRegistrationFees AS (
            SELECT redeem_timestamp, FLOOR(package_price / package_num_free_registrations) AS redemption_fees
            FROM Redeems
            NATURAL JOIN Buys
            NATURAL JOIN CoursePackages
        ),
        CourseOfferingRedemptionRegistrationFees AS (
            SELECT offering_launch_date, course_id, SUM(redemption_fees) AS total_redemption_fees
            FROM Redeems NATURAL JOIN RedemptionRegistrationFees NATURAL JOIN Sessions NATURAL RIGHT OUTER JOIN CourseOfferingsThisYear
            WHERE NOT redeem_cancelled
            GROUP BY offering_launch_date, course_id
        ),
        CourseOfferingNetRegistrationFees AS (
            SELECT offering_launch_date,
                course_id,
                (total_registration_fees - total_refunded_fees + total_redemption_fees) AS net_registration_fees
            FROM CourseOfferingsThisYear
            NATURAL JOIN CourseOfferingCreditCardRegistrationFees
            NATURAL JOIN CourseOfferingCreditCardRefundFees
            NATURAL JOIN CourseOfferingRedemptionRegistrationFees
        ),
        ManagerNetRegistrationFees AS (
            SELECT manager_id, SUM(f.net_registration_fees) AS net_registration_fees
            FROM Managers
            NATURAL LEFT OUTER JOIN ManagerCourseOfferings
            NATURAL JOIN CourseOfferingNetRegistrationFees f
            GROUP BY manager_id
        ),

        /* top course offering titles */
        ManagerCourseOfferingRankedByFees AS (
            SELECT manager_id, course_id, offering_launch_date,
                RANK() OVER (PARTITION BY manager_id ORDER BY f.net_registration_fees DESC) AS course_offering_rank
            FROM ManagerCourseOfferings NATURAL JOIN CourseOfferingNetRegistrationFees f
        ),
        ManagerTopCourseOfferingTitles AS (
            SELECT manager_id, ARRAY_AGG(course_title) top_course_offering_titles
            FROM Managers NATURAL LEFT OUTER JOIN (ManagerCourseOfferingRankedByFees NATURAL JOIN Courses)
            WHERE course_offering_rank = 1
            GROUP BY manager_id
        )

        /* oh yea everything come together */
        SELECT m.manager_name, ca.num_course_areas, co.num_course_offerings, f.net_registration_fees, t.top_course_offering_titles
        FROM Managers
            NATURAL JOIN ManagerNames m
            NATURAL JOIN ManagerNumCourseAreas ca
            NATURAL JOIN ManagerNumCourseOfferings co
            NATURAL JOIN ManagerNetRegistrationFees f
            NATURAL JOIN ManagerTopCourseOfferingTitles t
        ORDER BY m.manager_name ASC
    );
END;
$$ LANGUAGE plpgsql;
